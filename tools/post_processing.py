# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd
import pickle
import multiprocessing as mp
import os

def iou_with_anchors(anchors_min, anchors_max, box_min, box_max):
    """Compute jaccard score between a box and the anchors.
    """
    len_anchors = anchors_max - anchors_min
    int_xmin = np.maximum(anchors_min, box_min)
    int_xmax = np.minimum(anchors_max, box_max)
    inter_len = np.maximum(int_xmax - int_xmin, 0.)
    union_len = len_anchors - inter_len + box_max - box_min
    # print inter_len,union_len
    jaccard = np.divide(inter_len, union_len)
    return jaccard

def soft_nms(df, alpha, t1, t2):
    '''
    df: proposals generated by network;
    alpha: alpha value of Gaussian decaying function;
    t1, t2: threshold for soft nms.
    '''
    df = df.sort_values(by="score", ascending=False)
    tstart = list(df.xmin.values[:])
    tend = list(df.xmax.values[:])
    tscore = list(df.score.values[:])

    rstart = []
    rend = []
    rscore = []

    while len(tscore) > 1 and len(rscore) < 101:
        max_index = tscore.index(max(tscore))
        tmp_iou_list = iou_with_anchors(
            np.array(tstart),
            np.array(tend), tstart[max_index], tend[max_index])
        for idx in range(0, len(tscore)):
            if idx != max_index:
                tmp_iou = tmp_iou_list[idx]
                tmp_width = tend[max_index] - tstart[max_index]
                if tmp_iou > t1 + (t2 - t1) * tmp_width:
                    tscore[idx] = tscore[idx] * np.exp(-np.square(tmp_iou) /
                                                       alpha)

        rstart.append(tstart[max_index])
        rend.append(tend[max_index])
        rscore.append(tscore[max_index])
        tstart.pop(max_index)
        tend.pop(max_index)
        tscore.pop(max_index)

    newDf = pd.DataFrame()
    newDf['score'] = rscore
    newDf['xmin'] = rstart
    newDf['xmax'] = rend
    return newDf


def video_post_process(opt, video_list, video_dict):
    # 遍历结果列表
    for video_index in video_list:
        col_name = ["xmin", "xmax", "score"]
        df = pd.DataFrame(video_dict[video_index],columns=col_name)
        # proposal数量超过1

        if len(df) > 1:
            # nms阈值
            snms_alpha = opt.soft_nms_alpha
            snms_t1 = opt.soft_nms_low_thres
            snms_t2 = opt.soft_nms_high_thres
            # nms
            df = soft_nms(df, snms_alpha, snms_t1, snms_t2)

        # 按分数降序排列
        df = df.sort_values(by="score", ascending=False)
        proposal_list = []

        for j in range(min(10, len(df))):
            proposal_list.append([max(0, df.xmin.values[j]),min(1, df.xmax.values[j]),df.score.values[j]])
        proposal_list  = np.stack(proposal_list)
        result_dict[video_index] = proposal_list


def post_processing(filename, opt):
    # 主要是多线程的代码
    with open(filename,'rb') as f:
        video_dict = pickle.load(f)

    video_list = list(video_dict.keys())  # [:100]
    global result_dict
    result_dict = mp.Manager().dict()

    num_videos = len(video_list)
    num_videos_per_thread = num_videos // opt.post_process_thread
    processes = []
    for tid in range(opt.post_process_thread - 1):
        tmp_video_list = video_list[tid * num_videos_per_thread:(tid + 1) * num_videos_per_thread]
        p = mp.Process(target=video_post_process, args=(opt, tmp_video_list, video_dict))
        p.start()
        processes.append(p)
    tmp_video_list = video_list[(opt.post_process_thread - 1) * num_videos_per_thread:]
    p = mp.Process(target=video_post_process, args=(opt, tmp_video_list, video_dict))
    p.start()
    processes.append(p)
    for p in processes:
        p.join()

    result_dict = dict(result_dict)
    path = os.path.join('./output/',opt.model_name+'_top10.pkl')
    with open(path,'wb') as f:
        pickle.dump(result_dict,f)
    return path